package com.zos.groovy.utilities

import com.ibm.dbb.build.*
import com.ibm.dbb.build.report.*
import com.ibm.dbb.repository.*
import com.ibm.dbb.dependency.*
import groovy.time.*
import groovy.lang.GroovyClassLoader
import groovy.lang.Script 

/**
* @author gedgingt
* @version v4.0.0
* Date 12/24/2018
*
* SPDX-License-Identifier: Apache-2.0 
*/

class JCLrun {
	/**
	 *
	 * <br />
	 * Main zOS system or resident volume build routine
	 * 	Currently still work in progress
	 *
	 * @param args
	 * @deprecated
	 * @since version 1.00
	 */
	static main(args) {
		
	}
	public boolean execute(args) {
		//  declare the confDir location
		def confDir = "/usr/lpp/IBM/dbb/conf"
		
		// Execute JCL from a data set member
		new JCLExec().dataset("USR1.JCL").member("TEST").confDir(confDir).execute()
		
		// Execute JCL from a file on HFS
		new JCLExec().file(new File("/u/usr1/jcl/test.jcl")).confDir(confDir).execute()
		
		// Execute JCL from a String value in the script
		def jcl = '''\
		//HELLO  JOB ,
		//       MSGCLASS=H,MSGLEVEL=(1,1),TIME=(,4),REGION=0M
		//*
		//* PRINT \"HELLO WORLD\" ON JOB OUTPUT
		//*
		//STEP0001 EXEC PGM=IEBGENER
		//SYSIN    DD DUMMY
		//SYSPRINT DD SYSOUT=*
		//SYSUT1   DD *
		HELLO, WORLD
		/*
		//SYSUT2   DD SYSOUT=*
		//
		'''
		
		new JCLExec().text(jcl).confDir(confDir).execute()
		
		// Execute JCL and get output information
		JCLExec jclExec = new JCLExec()
		jclExec.dataset('USR1.JCL').member('TEST').execute()
		def maxRC = jclExec.getMaxRC()
		def jobID = jclExec.getSubmittedJobId()
		def jobName = jclExec.getSubmittedJobName()
		
		// Execute JCL and save the SYSPRINT output to zFS file
		JCLExec jclExec = new JCLExec()
		jclExec.dataset('USR1.JCL').member('TEST').execute()
		jclExec.saveOutput('SYSPRINT',  new File("/u/usr1/output/sysprint.out"), "UTF-8")
	}
